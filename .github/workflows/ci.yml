name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    name: 🧪 Lint & Test
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Select Xcode 15
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'
      
      - name: 📋 Xcode Version
        run: xcodebuild -version
      
      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
      
      - name: 🏃‍♂️ Create Gemfile
        run: |
          cat > Gemfile << EOF
          source "https://rubygems.org"
          
          gem "fastlane", "~> 2.217"
          gem "cocoapods", "~> 1.15"
          gem "xcov", "~> 1.8"
          EOF
      
      - name: 📦 Install Dependencies
        run: |
          bundle install
          # Install SwiftLint if not available
          if ! command -v swiftlint &> /dev/null; then
            brew install swiftlint
          fi
      
      - name: 🧹 Clean Build Directory
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          xcodebuild clean -scheme Progress
      
      - name: 🔍 SwiftLint Version
        run: swiftlint version
      
      - name: 🧪 Run Fastlane Lint
        run: bundle exec fastlane lint
        env:
          CI: true
          FASTLANE_SKIP_UPDATE_CHECK: true
          FASTLANE_HIDE_CHANGELOG: true
          FASTLANE_DISABLE_ANIMATION: true
      
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            test-results.html
            swiftlint-results.json
            coverage_reports/
          retention-days: 7
      
      - name: 📈 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Progress iOS Tests'
          path: 'test-results.xml'
          reporter: 'java-junit'
          fail-on-error: true
      
      - name: 💬 Comment PR with Coverage
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Check if coverage report exists
              const coverageDir = 'coverage_reports';
              if (fs.existsSync(coverageDir)) {
                const coverageFile = path.join(coverageDir, 'index.html');
                if (fs.existsSync(coverageFile)) {
                  const comment = `
            ## 📊 Code Coverage Report
            
            Coverage report has been generated. Check the artifacts for detailed coverage information.
            
            - **SwiftLint**: ✅ Passed
            - **Unit Tests**: ✅ Passed  
            - **Design Tokens**: ✅ Checked
            - **Localization**: ✅ Checked
            `;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Could not post coverage comment:', error);
            }

  security-and-compliance:
    name: 🔒 Security & Compliance
    runs-on: macos-13
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔍 Check for Secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          if grep -r -E "(api_key|secret|password|token)" --include="*.swift" Progress/ | grep -v "// TODO\|// FIXME"; then
            echo "❌ Potential secrets found in code!"
            exit 1
          else
            echo "✅ No secrets detected"
          fi
      
      - name: 📋 Check PRD Compliance
        run: |
          echo "📋 Checking PRD compliance..."
          
          # Check for UIKit imports (forbidden per PRD)
          if grep -r "import UIKit" --include="*.swift" Progress/; then
            echo "❌ UIKit imports found - SwiftUI only per PRD"
            exit 1
          fi
          
          # Check for hardcoded colors/fonts
          Scripts/ci/check-design-tokens.sh
          
          # Check localization
          Scripts/ci/check-localization.sh
          
          echo "✅ PRD compliance checks passed"
      
      - name: 🏗️ Check Build Performance
        run: |
          echo "🏗️ Testing build performance..."
          start_time=$(date +%s)
          
          xcodebuild build -scheme Progress -destination 'platform=iOS Simulator,name=iPhone 15 Pro' -quiet
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          echo "Build completed in ${duration} seconds"
          
          # PRD requirement: Cold launch under 500ms on iPhone 12+
          # Build time should be reasonable for CI
          if [ $duration -gt 300 ]; then
            echo "⚠️ Build time (${duration}s) is longer than expected"
          else
            echo "✅ Build performance acceptable"
          fi 